// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "github.com/Shaheen-AlQaraghuli/wallet-go/internal/app/models"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheClient is an autogenerated mock type for the cacheClient type
type MockCacheClient struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: ctx, walletID
func (_m *MockCacheClient) GetBalance(ctx context.Context, walletID string) (*int, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*int, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *int); ok {
		r0 = rf(ctx, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdempotentTransaction provides a mock function with given fields: ctx, idempotencyKey
func (_m *MockCacheClient) GetIdempotentTransaction(ctx context.Context, idempotencyKey string) (*models.Transaction, error) {
	ret := _m.Called(ctx, idempotencyKey)

	if len(ret) == 0 {
		panic("no return value specified for GetIdempotentTransaction")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Transaction, error)); ok {
		return rf(ctx, idempotencyKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Transaction); ok {
		r0 = rf(ctx, idempotencyKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, idempotencyKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mutex provides a mock function with given fields: ctx, key
func (_m *MockCacheClient) Mutex(ctx context.Context, key string) (func(context.Context) (bool, error), error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Mutex")
	}

	var r0 func(context.Context) (bool, error)
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (func(context.Context) (bool, error), error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) func(context.Context) (bool, error)); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(context.Context) (bool, error))
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBalance provides a mock function with given fields: ctx, walletID, balance
func (_m *MockCacheClient) SetBalance(ctx context.Context, walletID string, balance int) error {
	ret := _m.Called(ctx, walletID, balance)

	if len(ret) == 0 {
		panic("no return value specified for SetBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, walletID, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetIdempotentTransaction provides a mock function with given fields: ctx, idempotencyKey, transaction
func (_m *MockCacheClient) SetIdempotentTransaction(ctx context.Context, idempotencyKey string, transaction models.Transaction) error {
	ret := _m.Called(ctx, idempotencyKey, transaction)

	if len(ret) == 0 {
		panic("no return value specified for SetIdempotentTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Transaction) error); ok {
		r0 = rf(ctx, idempotencyKey, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCacheClient creates a new instance of MockCacheClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheClient {
	mock := &MockCacheClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
