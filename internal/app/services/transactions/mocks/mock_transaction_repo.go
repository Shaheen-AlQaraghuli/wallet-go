// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Shaheen-AlQaraghuli/wallet-go/internal/app/models"

	pagination "github.com/Shaheen-AlQaraghuli/wallet-go/internal/util/pagination"
)

// MockTransactionRepo is an autogenerated mock type for the transactionRepo type
type MockTransactionRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, transaction
func (_m *MockTransactionRepo) Create(ctx context.Context, transaction models.Transaction) (models.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Transaction) (models.Transaction, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Transaction) models.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB provides a mock function with given fields: ctx
func (_m *MockTransactionRepo) DB(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockTransactionRepo) GetByID(ctx context.Context, id string) (models.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, query
func (_m *MockTransactionRepo) List(ctx context.Context, query models.QueryTransactions) ([]models.Transaction, *pagination.Pagination, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Transaction
	var r1 *pagination.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.QueryTransactions) ([]models.Transaction, *pagination.Pagination, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.QueryTransactions) []models.Transaction); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.QueryTransactions) *pagination.Pagination); ok {
		r1 = rf(ctx, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.QueryTransactions) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAllTransactions provides a mock function with given fields: ctx, walletID
func (_m *MockTransactionRepo) ListAllTransactions(ctx context.Context, walletID string) (models.Transactions, error) {
	ret := _m.Called(ctx, walletID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllTransactions")
	}

	var r0 models.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Transactions, error)); ok {
		return rf(ctx, walletID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Transactions); ok {
		r0 = rf(ctx, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tx provides a mock function with given fields: ctx, do
func (_m *MockTransactionRepo) Tx(ctx context.Context, do func(context.Context) error) error {
	ret := _m.Called(ctx, do)

	if len(ret) == 0 {
		panic("no return value specified for Tx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, do)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, transaction
func (_m *MockTransactionRepo) Update(ctx context.Context, transaction models.Transaction) (models.Transaction, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Transaction) (models.Transaction, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Transaction) models.Transaction); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockTransactionRepo creates a new instance of MockTransactionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepo {
	mock := &MockTransactionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
